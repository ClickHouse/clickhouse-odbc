language: cpp

os:
  - linux
  - osx

compiler:
  - gcc

cache:
  ccache: true

addons:
  apt:
     sources: [ ubuntu-toolchain-r-test ]
     # should install fresh libstdc++ because trusty have no <codecvt> header
     packages: [ ninja-build, libstdc++-8-dev ]

matrix:
    include:
        # fastest builds first:

        # clang5 iodbc unbundled  Too old poco 1.3
        #- os: linux
        #  compiler: clang
        #  env: MATRIX_EVAL="export CC=clang CXX=clang++ CMAKE_FLAGS=-DUNBUNDLED=1"
        #  addons:
        #    apt:
        #      sources: [ ubuntu-toolchain-r-test ]
        #      packages: [ ninja-build, libstdc++-8-dev, libiodbc2-dev, libiodbc2, libpoco-dev ]
        #  git:
        #    submodules: false

        # osx libiodbc unbundled
        - os: osx
          env: MATRIX_EVAL="export CMAKE_FLAGS=-DUNBUNDLED=1"
          git:
            submodules: false
          addons:
            homebrew:
              packages: [ ninja, libiodbc, poco ]


        # clang5 iodbc
        - os: linux
          compiler: clang
          env: MATRIX_EVAL="export CC=clang CXX=clang++"
          addons:
            apt:
              sources: [ ubuntu-toolchain-r-test ]
              packages: [ ninja-build, libstdc++-8-dev, libiodbc2-dev, libiodbc2 ]

        # gcc8 iodbc
        - os: linux
          env: MATRIX_EVAL="export CC=gcc-8 CXX=g++-8"
          addons:
            apt:
              sources: [ ubuntu-toolchain-r-test ]
              packages: [ ninja-build, gcc-8, g++-8, libiodbc2-dev, libiodbc2 ]

        # clang8 unixodbc
        #- os: linux
        #  addons:
        #    apt:
        #      sources: [ ubuntu-toolchain-r-test, llvm-toolchain-trusty ]
        #      packages: [ ninja-build, libstdc++-8-dev, clang ]
        #  env: MATRIX_EVAL="export CC=clang-8 CXX=clang++-8 ODBC_LIB=unixodbc-dev"

        # clang5 unixodbc
        - os: linux
          compiler: clang
          addons:
            apt:
              sources: [ ubuntu-toolchain-r-test ]
              packages: [ ninja-build, libstdc++-8-dev, clang]
          env: MATRIX_EVAL="export CC=clang CXX=clang++ ODBC_LIB=unixodbc-dev"

        # gcc7 unixodbc
        - os: linux
          env: MATRIX_EVAL="export CC=gcc-7 CXX=g++-7 ODBC_LIB=unixodbc-dev"
          addons:
            apt:
              sources: [ ubuntu-toolchain-r-test ]
              packages: [ ninja-build, gcc-7, g++-7 ]

        - os: osx
          addons:
            homebrew:
              packages: [ ninja, libiodbc ]

        - os: osx
          addons:
            homebrew:
              packages: [ ninja, unixodbc ]


    exclude:
        - os: linux
          compiler: gcc
        - os: osx
          compiler: gcc


install:
  - eval "${MATRIX_EVAL}"
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ -n "$ODBC_LIB" ]; then sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu bionic main universe"; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ -n "$ODBC_LIB" ]; then sudo apt-get update -q > build.log 2>&1 || (cat build.log && exit 1); fi
  # Need in binulils bacause /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/libodbc.a(logOpen.o): unrecognized relocation (0x2a) in section `.text'
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ -n "$ODBC_LIB" ]; then sudo apt-get install -y $ODBC_LIB binutils | tee build.log 2>&1 || (cat build.log && exit 1); fi

script:
  - mkdir -p build
  - cd build
  - cmake .. -G Ninja -DCMAKE_CXX_COMPILER=`which $CXX` -DCMAKE_C_COMPILER=`which $CC` $CMAKE_FLAGS && ninja all && ninja test
