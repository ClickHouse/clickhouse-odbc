language: cpp

git:
  clone: true
  submodules: true
  depth: 1
  quiet: false

env:
  global:
    - SOURCE_DIR=$TRAVIS_BUILD_DIR
    - BUILD_DIR=$SOURCE_DIR/build
    - INSTALL_DIR=$SOURCE_DIR/build/prefix
    - PACKAGE_DIR=$SOURCE_DIR/build/package
    - RUN_DIR=$SOURCE_DIR/build/run
    - CTEST_EXTRA_ARGS=--output-on-failure

jobs:
  include:

    - name: "Ubuntu 18.04 - UnixODBC - Debug - x86_64 - GCC (system) - Unix Makefiles"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_PROVIDER=UnixODBC
        - BUILD_TYPE=Debug
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:20.3"
      services:
        - docker
      addons:
        apt:
          sources:
            - sourceline: 'deb https://apt.kitware.com/ubuntu/ bionic main'
              key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
          packages:
            - gcc
            - g++
            - libicu-dev
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - UnixODBC - Release - x86_64 - GCC (system) - Unix Makefiles"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_PROVIDER=UnixODBC
        - BUILD_TYPE=Release
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:20.3"
      services:
        - docker
      addons:
        apt:
          sources:
            - sourceline: 'deb https://apt.kitware.com/ubuntu/ bionic main'
              key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
          packages:
            - gcc
            - g++
            - libicu-dev
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - UnixODBC - RelWithDebInfo - x86_64 - GCC (system) - Unix Makefiles"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_PROVIDER=UnixODBC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:20.3"
      services:
        - docker
      addons:
        apt:
          sources:
            - sourceline: 'deb https://apt.kitware.com/ubuntu/ bionic main'
              key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
          packages:
            - gcc
            - g++
            - libicu-dev
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - UnixODBC - RelWithDebInfo - System third-party libs - x86_64 - GCC (system) - Unix Makefiles"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_PROVIDER=UnixODBC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=yes
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:20.3"
      services:
        - docker
      addons:
        apt:
          sources:
            - sourceline: 'deb https://apt.kitware.com/ubuntu/ bionic main'
              key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
          packages:
            - gcc
            - g++
            - openssl
            - libssl-dev
            - libpoco-dev
            - libicu-dev
            - googletest
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - UnixODBC - RelWithDebInfo - x86_64 - Clang (default) - Unix Makefiles"
      os: linux
      dist: bionic
      compiler: clang
      env:
        - CC=clang
        - CXX=clang++
        - ODBC_PROVIDER=UnixODBC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:20.3"
      services:
        - docker
      addons:
        apt:
          sources:
            - sourceline: 'deb https://apt.kitware.com/ubuntu/ bionic main'
              key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
          packages:
            - clang
            - libicu-dev
            - unixodbc
            - unixodbc-bin
            - unixodbc-dev

    - name: "Ubuntu 18.04 - iODBC - RelWithDebInfo - x86_64 - GCC (system) - Unix Makefiles"
      os: linux
      dist: bionic
      compiler: gcc
      env:
        - CC=gcc
        - CXX=g++
        - ODBC_PROVIDER=iODBC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:20.3"
      services:
        - docker
      addons:
        apt:
          sources:
            - sourceline: 'deb https://apt.kitware.com/ubuntu/ bionic main'
              key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
          packages:
            - gcc
            - g++
            - libicu-dev
            - iodbc
            - libiodbc2
            - libiodbc2-dev

    - name: "Ubuntu 18.04 - iODBC - RelWithDebInfo - x86_64 - Clang (default) - Unix Makefiles"
      os: linux
      dist: bionic
      compiler: clang
      env:
        - CC=clang
        - CXX=clang++
        - ODBC_PROVIDER=iODBC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
        - CLICKHOUSE_SERVER_IMAGE="yandex/clickhouse-server:20.3"
      services:
        - docker
      addons:
        apt:
          sources:
            - sourceline: 'deb https://apt.kitware.com/ubuntu/ bionic main'
              key_url: 'https://apt.kitware.com/keys/kitware-archive-latest.asc'
          packages:
            - clang
            - libicu-dev
            - iodbc
            - libiodbc2
            - libiodbc2-dev

    - name: "Windows Server 1803 - MDAC - RelWithDebInfo - x64 - MSVC (Visual Studio 2017) - MSBuild"
      os: windows
      language: shell
      env:
        - ODBC_PROVIDER=MDAC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=yes
        - CMAKE_CONFIGURE_EXTRA_ARGS="-A x64 -DCMAKE_SYSTEM_VERSION=10.0.18362.0 $CMAKE_CONFIGURE_EXTRA_ARGS"
        - VCVARSALL_ARGS=x64

    - name: "Windows Server 1803 - MDAC - RelWithDebInfo - x86 - MSVC (Visual Studio 2017) - MSBuild"
      os: windows
      language: shell
      env:
        - ODBC_PROVIDER=MDAC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=yes
        - CMAKE_CONFIGURE_EXTRA_ARGS="-A Win32 -DCMAKE_SYSTEM_VERSION=10.0.18362.0 $CMAKE_CONFIGURE_EXTRA_ARGS"
        - VCVARSALL_ARGS=x86

    - name: "macOS 10.14 - iODBC - RelWithDebInfo - x86_64 - AppleClang (Xcode 11.2) - Unix Makefiles"
      os: osx
      osx_image: xcode11.2
      compiler: clang
      env:
        - ODBC_PROVIDER=iODBC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
      addons:
        homebrew:
          packages:
            - icu4c
            - libiodbc
          update: true

    - name: "macOS 10.14 - iODBC - RelWithDebInfo - System third-party libs - x86_64 - AppleClang (Xcode 11.2) - Unix Makefiles"
      os: osx
      osx_image: xcode11.2
      compiler: clang
      env:
        - ODBC_PROVIDER=iODBC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=yes
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
      addons:
        homebrew:
          packages:
            - openssl
            - poco
            - icu4c
            - libiodbc
          update: true

    - name: "macOS 10.14 - UnixODBC - RelWithDebInfo - x86_64 - AppleClang (Xcode 11.2) - Unix Makefiles"
      os: osx
      osx_image: xcode11.2
      compiler: clang
      env:
        - ODBC_PROVIDER=UnixODBC
        - BUILD_TYPE=RelWithDebInfo
        - EXTERNAL_THIRD_PARTY=no
        - PACKAGING=yes
        - TESTING=yes
        - STANDALONE_TESTS_ONLY=no
      addons:
        homebrew:
          packages:
            - icu4c
            - unixodbc
          update: true

before_install: |-
  set -Eeo pipefail
  unalias cd || true
  unset -f cd || true

  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    sudo apt-get update -q
  elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_*.pkg -target /
    cd "$(brew --repo)" && git fetch && git reset --hard origin/master && cd -
    brew update
  elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    : # choco upgrade
  fi

install: |-
  if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
    export PATH=$(echo "$PATH" | sed -e 's|:/usr/local/cmake-[^:]*/bin:|:|')

    sudo apt-get install -y build-essential cmake perl libdbi-perl libdbd-odbc-perl python python-pip python-setuptools python3 python3-pip python3-setuptools

    if [[ "$ODBC_PROVIDER" == "UnixODBC" ]]; then
      pip install --user pyodbc
      pip3 install --user pyodbc
    fi

    pip3 install --user conan testflows
  elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    # brew install cmake perl python

    PERL_MM_USE_DEFAULT=1 cpan -T DBD::ODBC
    if [[ "$ODBC_PROVIDER" == "UnixODBC" ]]; then
      pip2 install --user pyodbc
      pip3 install --user pyodbc
    fi

    PY3_USER_BASE_PATH="$(python3 -m site --user-base)"
    export PATH="$PY3_USER_BASE_PATH/bin:$PATH"

    pip3 install --user conan testflows
  elif [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    export OLD_VSWHERE=yes

    choco install python2
    choco install python3

    # TODO: use choco instead of manual download/unpack/env setting, once 3.14+ version
    # is available, since starting from 3.14 WiX Toolset doesn't depend on .NET 3.5,
    # which has problems installing via choco.
    # choco install wixtoolset --yes
    wget https://wixtoolset.org/downloads/v3.14.0.712/wix314-binaries.zip
    powershell -Command Expand-Archive wix314-binaries.zip -DestinationPath wix314-binaries
    export WIX="$(cd wix314-binaries && pwd -W)"

    PY3_USER_SITE_PATH="$(py -3 -m site --user-site)"
    PY3_USER_SITE_PATH="${PY3_USER_SITE_PATH//\\//}"
    PY3_USER_SITE_PATH="${PY3_USER_SITE_PATH/C\://C}"
    export PATH="$PY3_USER_SITE_PATH/../Scripts:$PATH"

    py -3 -m pip install --user conan testflows
  fi

.clickhouse_start: &clickhouse_start |-
  if [[ "$TESTING" == "yes" ]] && [[ "$STANDALONE_TESTS_ONLY" != "yes" ]]; then
    if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
      docker pull ${CLICKHOUSE_SERVER_IMAGE}
      CLICKHOUSE_SERVER_CONTAINER=$(docker run -d ${CLICKHOUSE_SERVER_IMAGE})
      CLICKHOUSE_SERVER_IP=$(docker inspect -f '{{ .NetworkSettings.IPAddress }}' ${CLICKHOUSE_SERVER_CONTAINER})
      docker ps -a
      docker stats -a --no-stream
    elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      # In macOS, ClickHouse is installed and running as a separate process on this same system.
      # TODO: use native package manager when available.
      $SOURCE_DIR/test/deploy_and_run_clickhouse_macos.sh
      CLICKHOUSE_SERVER_IP=localhost
    fi
  fi

.odbc_configure: &odbc_configure |-
  if [[ "$TESTING" == "yes" ]] && [[ "$STANDALONE_TESTS_ONLY" != "yes" ]]; then
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then

      : # TODO

    else
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        ODBC_DRIVER_PATH=$BUILD_DIR/driver/libclickhouseodbc.so
        ODBC_DRIVERW_PATH=$BUILD_DIR/driver/libclickhouseodbcw.so
      elif [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        ODBC_DRIVER_PATH=$BUILD_DIR/driver/libclickhouseodbc.dylib
        ODBC_DRIVERW_PATH=$BUILD_DIR/driver/libclickhouseodbcw.dylib
      fi

      export ODBCSYSINI=$RUN_DIR
      export ODBCINSTINI=.odbcinst.ini
      export ODBCINI=$ODBCSYSINI/.odbc.ini
      if [[ "$ODBC_PROVIDER" == "iODBC" ]]; then
        # Full path to a custom odbcinst.ini in ODBCINSTINI for iODBC.
        export ODBCINSTINI=$ODBCSYSINI/$ODBCINSTINI
      fi

      cat > $ODBCSYSINI/.odbcinst.ini <<-EOF
  [ODBC]
  Trace     = 1
  TraceFile = ${RUN_DIR}/odbc-driver-manager-trace.log
  Debug     = 1
  DebugFile = ${RUN_DIR}/odbc-driver-manager-debug.log

  [ODBC Drivers]
  ClickHouse ODBC Driver (ANSI)    = Installed
  ClickHouse ODBC Driver (Unicode) = Installed

  [ClickHouse ODBC Driver (ANSI)]
  Driver     = ${ODBC_DRIVER_PATH}
  Setup      = ${ODBC_DRIVER_PATH}
  UsageCount = 1

  [ClickHouse ODBC Driver (Unicode)]
  Driver     = ${ODBC_DRIVERW_PATH}
  Setup      = ${ODBC_DRIVERW_PATH}
  UsageCount = 1
  EOF

      cat > $ODBCSYSINI/.odbc.ini <<-EOF
  [ODBC]
  Trace     = 1
  TraceFile = ${RUN_DIR}/odbc-driver-manager-trace.log
  Debug     = 1
  DebugFile = ${RUN_DIR}/odbc-driver-manager-debug.log

  [ODBC Data Sources]
  ClickHouse DSN (ANSI)         = ClickHouse ODBC Driver (ANSI)
  ClickHouse DSN (Unicode)      = ClickHouse ODBC Driver (Unicode)
  ClickHouse DSN (ANSI, RBWNAT) = ClickHouse ODBC Driver (ANSI)

  [ClickHouse DSN (ANSI)]
  Driver        = ClickHouse ODBC Driver (ANSI)
  Description   = Test DSN for ClickHouse ODBC Driver (ANSI)
  Url           = http://${CLICKHOUSE_SERVER_IP}
  DriverLog     = yes
  DriverLogFile = ${RUN_DIR}/clickhouse-odbc-driver.log

  [ClickHouse DSN (Unicode)]
  Driver        = ClickHouse ODBC Driver (Unicode)
  Description   = Test DSN for ClickHouse ODBC Driver (Unicode)
  Url           = http://${CLICKHOUSE_SERVER_IP}
  DriverLog     = yes
  DriverLogFile = ${RUN_DIR}/clickhouse-odbc-driver-w.log

  [ClickHouse DSN (ANSI, RBWNAT)]
  Driver        = ClickHouse ODBC Driver (ANSI)
  Description   = Test DSN for ClickHouse ODBC Driver (ANSI) that uses RowBinaryWithNamesAndTypes as data source communication default format
  Url           = http://${CLICKHOUSE_SERVER_IP}/query?default_format=RowBinaryWithNamesAndTypes
  DriverLog     = yes
  DriverLogFile = ${RUN_DIR}/clickhouse-odbc-driver.log
  EOF
    fi
  fi

.configure: &configure |-
  CMAKE_CONFIGURE_ARGS="-DCH_ODBC_TEST_DSN_LIST=\"ClickHouse DSN (ANSI);ClickHouse DSN (Unicode);ClickHouse DSN (ANSI, RBWNAT)\" $CMAKE_CONFIGURE_EXTRA_ARGS"
  if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
    CMAKE_CONFIGURE_ARGS="-DICU_ROOT=$(brew --prefix)/opt/icu4c $CMAKE_CONFIGURE_ARGS"
  fi
  if [[ "$EXTERNAL_THIRD_PARTY" == "yes" ]]; then
    CMAKE_CONFIGURE_ARGS="-DCH_ODBC_USE_SYSTEM_THIRD_PARTIES=ON -DCH_ODBC_USE_SYSTEM_FOLLY=OFF -DCH_ODBC_USE_SYSTEM_GOOGLETEST=OFF -DCH_ODBC_USE_SYSTEM_NANODBC=OFF $CMAKE_CONFIGURE_ARGS"
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      CMAKE_CONFIGURE_ARGS="-DOPENSSL_ROOT_DIR=$(brew --prefix)/opt/openssl $CMAKE_CONFIGURE_ARGS"
    fi
  fi
  if [[ ! -z "$ODBC_PROVIDER" ]]; then
    CMAKE_CONFIGURE_ARGS="-DODBC_PROVIDER=$ODBC_PROVIDER $CMAKE_CONFIGURE_ARGS"
  fi
  cd $BUILD_DIR
  echo "#!/usr/bin/env bash" > cmake_configure.sh
  echo "set -Eeuo pipefail" >> cmake_configure.sh
  echo "cmake $CMAKE_CONFIGURE_ARGS $SOURCE_DIR" >> cmake_configure.sh
  chmod u+x cmake_configure.sh
  if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    $SOURCE_DIR/test/vcvars_enabled_bash.sh ./cmake_configure.sh
  else
    ./cmake_configure.sh
  fi

.build: &build |-
  CMAKE_BUILD_ARGS="--config $BUILD_TYPE $CMAKE_BUILD_EXTRA_ARGS -- $CMAKE_BUILD_NATIVE_EXTRA_ARGS"
  cd $BUILD_DIR
  if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    $SOURCE_DIR/test/vcvars_enabled_bash.sh cmake --build . $CMAKE_BUILD_ARGS
  else
    cmake --build . $CMAKE_BUILD_ARGS
  fi

.pack: &pack |-
  if [[ "$PACKAGING" == "yes" ]]; then
    CPACK_ARGS="-C $BUILD_TYPE $CPACK_EXTRA_ARGS"
    cd $BUILD_DIR
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      # 'cpack' is a chocolatey tool, so we use CMake's 'package' target instead
      CPACK_ARGS="--build . --config $BUILD_TYPE --target package -- $CPACK_EXTRA_ARGS"
      $SOURCE_DIR/test/vcvars_enabled_bash.sh cmake $CPACK_ARGS
    else
      cpack $CPACK_ARGS
    fi
  fi

.test: &test |-
  if [[ "$TESTING" == "yes" ]]; then
    CTEST_ARGS="-C $BUILD_TYPE $CTEST_EXTRA_ARGS"
    if [[ "$STANDALONE_TESTS_ONLY" == "yes" ]]; then
      CTEST_ARGS="-R '.*-ut.*' $CTEST_ARGS"
    fi
    cd $BUILD_DIR
    if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
      $SOURCE_DIR/test/vcvars_enabled_bash.sh ctest $CTEST_ARGS
    else
      ctest $CTEST_ARGS
    fi
  fi

before_script: |-
  mkdir -p $SOURCE_DIR
  mkdir -p $BUILD_DIR
  mkdir -p $INSTALL_DIR
  mkdir -p $PACKAGE_DIR
  mkdir -p $RUN_DIR

  if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then
    SOURCE_DIR="$(cd $SOURCE_DIR && pwd -W)"
    BUILD_DIR="$(cd $BUILD_DIR && pwd -W)"
    INSTALL_DIR="$(cd $INSTALL_DIR && pwd -W)"
    PACKAGE_DIR="$(cd $PACKAGE_DIR && pwd -W)"
    RUN_DIR="$(cd $RUN_DIR && pwd -W)"
  fi

script:
  - *clickhouse_start
  - *odbc_configure
  - *configure
  - *build
  - *pack
  - *test
