language: cpp
dist: bionic

os:
  - linux
  - osx

compiler:
  - gcc

cache:
  ccache: true

services:
  - docker

env:
  global:
    - CLICKHOUSE_SERVER_IMAGE=yandex/clickhouse-server:19.11.8.46

addons:
  apt:
     sources: [ ubuntu-toolchain-r-test ]
     # should install fresh libstdc++ because trusty have no <codecvt> header
     packages: [ ninja-build, libstdc++-8-dev ]

matrix:
    include:
        # fastest builds first:

        # clang5 iodbc unbundled  Too old poco 1.3
        #- os: linux
        #  compiler: clang
        #  env: MATRIX_EVAL="export CC=clang CXX=clang++ CMAKE_FLAGS=-DUNBUNDLED=1"
        #  addons:
        #    apt:
        #      sources: [ ubuntu-toolchain-r-test ]
        #      packages: [ ninja-build, libstdc++-8-dev, libiodbc2-dev, libiodbc2, libpoco-dev ]
        #  git:
        #    submodules: false

        # osx libiodbc unbundled
        - os: osx
          env: MATRIX_EVAL="export CMAKE_FLAGS=-DUNBUNDLED=1 HOMEBREW_PACKAGES='libiodbc poco'" 
          git:
            submodules: false
          # addons:
          #   homebrew:
          #     packages: [ ninja, libiodbc, poco ]


        # clang5 iodbc
        - os: linux
          compiler: clang
          env: MATRIX_EVAL="export CC=clang CXX=clang++"
          addons:
            apt:
              sources: [ ubuntu-toolchain-r-test ]
              packages: [ ninja-build, libstdc++-8-dev, libiodbc2-dev, libiodbc2 ]

        # gcc8 iodbc
        - os: linux
          env: MATRIX_EVAL="export CC=gcc-8 CXX=g++-8"
          addons:
            apt:
              sources: [ ubuntu-toolchain-r-test ]
              packages: [ ninja-build, gcc-8, g++-8, libiodbc2-dev, libiodbc2 ]

        # clang8 unixodbc
        #- os: linux
        #  addons:
        #    apt:
        #      sources: [ ubuntu-toolchain-r-test, llvm-toolchain-trusty ]
        #      packages: [ ninja-build, libstdc++-8-dev, clang ]
        #  env: MATRIX_EVAL="export CC=clang-8 CXX=clang++-8 ODBC_LIB=unixodbc-dev"

        # clang5 unixodbc
        - os: linux
          compiler: clang
          addons:
            apt:
              sources: [ ubuntu-toolchain-r-test ]
              packages: [ ninja-build, libstdc++-8-dev, clang]
          env: MATRIX_EVAL="export CC=clang CXX=clang++ ODBC_LIB=unixodbc-dev"

        # gcc7 unixodbc
        - os: linux
          env: MATRIX_EVAL="export CC=gcc-7 CXX=g++-7 ODBC_LIB=unixodbc-dev"
          addons:
            apt:
              sources: [ ubuntu-toolchain-r-test ]
              packages: [ ninja-build, gcc-7, g++-7]

        - os: osx
          env: MATRIX_EVAL="export HOMEBREW_PACKAGES='libiodbc'" 
          # addons:
          #   homebrew:
          #     packages: [ ninja, libiodbc ]

        - os: osx
          env: MATRIX_EVAL="export HOMEBREW_PACKAGES='unixodbc'" 
          # addons:
          #   homebrew:
          #     packages: [ ninja, unixodbc ]


    exclude:
        - os: linux
          compiler: gcc
        - os: osx
          compiler: gcc

install:
  - eval "${MATRIX_EVAL}"
    # brew update is to mitigate Travis error "Error: Your Homebrew is outdated. Please run `brew update`."
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then echo "installing ninja + ${HOMEBREW_PACKAGES}"; brew install ninja ${HOMEBREW_PACKAGES}; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ -n "$ODBC_LIB" ]; then sudo apt-add-repository "deb http://archive.ubuntu.com/ubuntu bionic main universe"; fi
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ -n "$ODBC_LIB" ]; then sudo apt-get update -q > build.log 2>&1 || (cat build.log && exit 1); fi
  # Need in binulils because /usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/libodbc.a(logOpen.o): unrecognized relocation (0x2a) in section `.text'
  - if [ "$TRAVIS_OS_NAME" == "linux" ] && [ -n "$ODBC_LIB" ]; then sudo apt-get install -y $ODBC_LIB binutils | tee build.log 2>&1 || (cat build.log && exit 1); fi

# TODO: get nanodbc, right now it fails to build
# before_script:
#   # nanodbc for more tests
#   - cd ./contrib; git clone https://github.com/nanodbc/nanodbc; cd ..
#   - ls -lah . ./contrib

script:
  - mkdir -p build
  - cd build
  - cmake .. -G Ninja -DCMAKE_CXX_COMPILER=`which $CXX` -DCMAKE_C_COMPILER=`which $CC` $CMAKE_FLAGS -DTEST_DSN=clickhouse_localhost -DTEST_DSN_W=clickhouse_localhost_w && cmake --build . --target all
  # unit-tests
  - ctest -R '.*-ut.*'
  # more complicated tests
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then echo "Unable to test on OSX since docker is not supported on Travis OSX agents."; exit ${TRAVIS_TEST_RESULT}; fi
  # Setting up test prerequisites: docker, pyodbc, odbc module for perl, isql (or iusql or other)
  - sudo apt install -y perl libdbi-perl libdbd-odbc-perl python-pyodbc unixodbc unixodbc-dev
  # Using absolute path to compiler to fix setup.py issue of pyodbc: unable to execute 'clang': No such file or directory
  #- sudo CC=`which $CC` CXX=`which $CXX` pip install pyodbc -V --disable-pip-version-check
  # To simplify things a bit, start ClickHouse server in docker
  - echo "Clickhouse image ${CLICKHOUSE_SERVER_IMAGE}";
  - docker pull ${CLICKHOUSE_SERVER_IMAGE}
  - CLICKHOUSE_SERVER_CONTAINER=$(docker run  -d ${CLICKHOUSE_SERVER_IMAGE})
  - CLICKHOUSE_SERVER_IP=$(docker inspect -f '{{ .NetworkSettings.IPAddress }}' ${CLICKHOUSE_SERVER_CONTAINER})
  - docker ps -a
  - docker stats -a --no-stream
  # TODO: think about paths on windows
  - ODBC_DRIVER_PATH=$(realpath driver/libclickhouseodbc.so)
  - ODBC_DRIVERW_PATH=$(realpath driver/libclickhouseodbcw.so)
  - echo "Compose ODBC config"
  - |
    cat > ~/.odbc.ini <<-EOF
    [clickhouse_localhost]
    Driver=${ODBC_DRIVER_PATH}
    url=http://${CLICKHOUSE_SERVER_IP}
    [clickhouse_localhost_w]
    Driver=${ODBC_DRIVERW_PATH}
    url=http://${CLICKHOUSE_SERVER_IP}
    EOF
  - echo "Staring tests..."
  - ctest -V
