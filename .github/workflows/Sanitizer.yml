name: Sanitize - Linux

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * 1'
  push:
    branches: [ master ]
  pull_request:
    branches: [ '**' ]
  release:
    types:
      - created

concurrency:
  group: sanitize-linux-${{ github.head_ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash
    working-directory: run

jobs:
  build_and_test:

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        build_type: [RelWithDebInfo]
        third_parties: [bundled-third-parties]
        sanitizer: [address, memory, undefined]

    runs-on: ${{ matrix.os }}

    steps:

    - name: Create directories
      working-directory: ${{ github.workspace }}
      run: |
        mkdir -p ${{ github.workspace }}/run
        mkdir -p ${{ github.workspace }}/build
        mkdir -p ${{ github.workspace }}/prefix
        mkdir -p ${{ github.workspace }}/install
        mkdir -p ${{ github.workspace }}/package

    - name: Install dependencies - Common
      run: |
        sudo apt update -q
        sudo apt upgrade -y
        sudo apt install -y build-essential lsb-release software-properties-common gnupg

    - name: Install dependencies - LLVM
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 20 all

    - name: Clone the repo
      uses: actions/checkout@v4
      with:
        path: source
        submodules: true

    - name: Configure
      run: >
        CC=/usr/lib/llvm-20/bin/clang
        CXX=/usr/lib/llvm-20/bin/clang++
        cmake -S ${{ github.workspace }}/source -B ${{ github.workspace }}/build
        -DCMAKE_POLICY_VERSION_MINIMUM=3.5
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DTEST_DSN_LIST="ClickHouse DSN (ANSI);ClickHouse DSN (Unicode)"
        -DSANITIZE=${{ matrix.sanitizer }}

    - name: Build
      run: >
        CC=/usr/lib/llvm-20/bin/clang
        CXX=/usr/lib/llvm-20/bin/clang++
        cmake --build ${{ github.workspace }}/build --config ${{ matrix.build_type }} --parallel $(nproc)

    - name: Start ClickHouse in Docker
      uses: hoverkraft-tech/compose-action@v2.0.1
      with:
        compose-file: source/test/docker-compose.yml
        down-flags: --volumes

    - name: Prepare ODBC ini configs
      run: |
        echo "Preparing ODBC ini configs"
        cat > ${{ github.workspace }}/run/.odbcinst.ini <<-EOF
        [ODBC]

        [ODBC Drivers]
        ClickHouse ODBC Driver (ANSI)    = Installed
        ClickHouse ODBC Driver (Unicode) = Installed

        [ClickHouse ODBC Driver (ANSI)]
        Driver     = ${{ github.workspace }}/build/driver/libclickhouseodbc.so
        Setup      = ${{ github.workspace }}/build/driver/libclickhouseodbc.so
        UsageCount = 1

        [ClickHouse ODBC Driver (Unicode)]
        Driver     = ${{ github.workspace }}/build/driver/libclickhouseodbcw.so
        Setup      = ${{ github.workspace }}/build/driver/libclickhouseodbcw.so
        UsageCount = 1
        EOF

        cat > ${{ github.workspace }}/run/.odbc.ini <<-EOF
        [ODBC]

        [ODBC Data Sources]
        ClickHouse DSN (ANSI)         = ClickHouse ODBC Driver (ANSI)
        ClickHouse DSN (Unicode)      = ClickHouse ODBC Driver (Unicode)

        [ClickHouse DSN (ANSI)]
        Driver        = ClickHouse ODBC Driver (ANSI)
        Description   = Test DSN for ClickHouse ODBC Driver (ANSI)
        Url           = http://${CLICKHOUSE_SERVER_IP}
        DriverLog     = yes
        DriverLogFile = ${{ github.workspace }}/run/clickhouse-odbc-driver.log

        [ClickHouse DSN (Unicode)]
        Driver        = ClickHouse ODBC Driver (Unicode)
        Description   = Test DSN for ClickHouse ODBC Driver (Unicode)
        Url           = http://localhost:8123
        DriverLog     = yes
        DriverLogFile = ${{ github.workspace }}/run/clickhouse-odbc-driver-w.log
        EOF

    - name: Test - Run C++ integration tests
      working-directory: ${{ github.workspace }}/build
      run: |
        export ODBCSYSINI=
        export ODBCINSTINI="${{ github.workspace }}/run/.odbcinst.ini"
        export ODBCINI="${{ github.workspace }}/run/.odbc.ini"
        ctest --output-on-failure --build-config ${{ matrix.build_type }}
